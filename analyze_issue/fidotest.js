var asnLen = function(buf) {
    if (buf.length < 2 || buf[0] != 0x30)
        throw new Error("Invalid data: Not a SEQUENCE ASN/DER structure");

    var len = buf[1];
    if (len & 0x80) { // long form
        var bytesCnt = len & 0x7F;
        if (buf.length < 2+bytesCnt)
            throw new Error("Invalid data: ASN structure not fully represented");
        len = 0;
        for (var i = 0; i < bytesCnt; i++)
            len = len*0x100 + buf[2+i];
        len += bytesCnt; // add bytes for length itself.
    }
    return len + 2; // add 2 initial bytes: type and length.
};

var URLSafeBase64 = require('urlsafe-base64');
var crypto = require('crypto');

  var registrationDataBuffer = new Buffer ( [ 0x05,0x04,0x8B,0xDC,0xA3,0x57,0xC9,0x92,0xB7,0x52,0xB9,0x11,0xC9,0x1B,0x60,0x3B,0xC8,0xB2,0x51,0x87,0xC9,0x2B,0xD8,0x7A,0xBF,0x49,0xC8,0x2C,0x69,0xD3,0x18,0x87,0x4E,0xAF,0xD0,0xAC,0x76,0x94,0x75,0x0D,0x0D,0x2A,0xC3,0x50,0x87,0x0E,0x9C,0x23,0x41,0xCE,0xC7,0x6E,0x00,0xDE,0x9E,0xE3,0xFE,0x2B,0x35,0x76,0xA1,0xBF,0x4B,0xE9,0x61,0x61,0x50,0x1D,0x54,0x29,0x10,0x4E,0xA2,0xE3,0x3B,0x7D,0x90,0x5C,0xF5,0x50,0xDC,0x85,0x4D,0x99,0x41,0x65,0x27,0x40,0x83,0x3C,0xA1,0xB3,0x78,0xA2,0x51,0x2B,0x3E,0xB2,0x74,0xCF,0x06,0x48,0x25,0xBD,0x64,0x24,0x67,0xD7,0x44,0x1F,0x34,0x2C,0x63,0x76,0x47,0x06,0x31,0xC2,0x8C,0xFE,0xE2,0x40,0x90,0x4B,0x69,0x32,0x7F,0xD9,0x94,0x7F,0xE5,0x12,0x4B,0x71,0xFA,0xE8,0x88,0xBA,0xC7,0x7A,0x5B,0xA2,0xE8,0x69,0x9B,0xAE,0xF8,0x30,0x82,0x01,0x4C,0x30,0x81,0xF3,0xA0,0x03,0x02,0x01,0x02,0x02,0x0A,0x18,0xBC,0x09,0x9A,0x01,0x99,0xB8,0x1B,0xD8,0x7C,0x30,0x0A,0x06,0x08,0x2A,0x86,0x48,0xCE,0x3D,0x04,0x03,0x02,0x30,0x17,0x31,0x15,0x30,0x13,0x06,0x03,0x55,0x04,0x03,0x13,0x0C,0x46,0x54,0x20,0x46,0x49,0x44,0x4F,0x20,0x30,0x31,0x30,0x30,0x30,0x1E,0x17,0x0D,0x31,0x36,0x30,0x34,0x31,0x35,0x31,0x35,0x30,0x30,0x30,0x30,0x5A,0x17,0x0D,0x32,0x36,0x30,0x34,0x31,0x35,0x31,0x35,0x30,0x30,0x30,0x30,0x5A,0x30,0x27,0x31,0x25,0x30,0x23,0x06,0x03,0x55,0x04,0x03,0x13,0x1C,0x46,0x54,0x20,0x46,0x49,0x44,0x4F,0x20,0x55,0x32,0x46,0x20,0x34,0x32,0x32,0x31,0x30,0x31,0x30,0x31,0x30,0x39,0x36,0x31,0x35,0x34,0x30,0x34,0x30,0x59,0x30,0x13,0x06,0x07,0x2A,0x86,0x48,0xCE,0x3D,0x02,0x01,0x06,0x08,0x2A,0x86,0x48,0xCE,0x3D,0x03,0x01,0x07,0x03,0x42,0x00,0x04,0xA4,0xCB,0x0F,0x13,0xDE,0xD6,0x40,0x2C,0x0D,0xD6,0xFB,0x0B,0x43,0x3B,0x0A,0x6D,0xC3,0xA7,0x00,0x57,0x63,0x61,0xB5,0x57,0x32,0x92,0x9D,0xF4,0xD8,0x62,0x0D,0xC8,0x2A,0x1A,0xD9,0x7F,0xC9,0x41,0xA5,0x44,0x11,0x89,0x97,0x86,0xF0,0x3D,0xF6,0xEC,0xE0,0x75,0x87,0x38,0x52,0x48,0xFB,0xDD,0x9C,0x8B,0x63,0x38,0xF3,0xF1,0x2D,0x54,0xA3,0x17,0x30,0x15,0x30,0x13,0x06,0x0B,0x2B,0x06,0x01,0x04,0x01,0x82,0xE5,0x1C,0x02,0x01,0x01,0x04,0x04,0x03,0x02,0x05,0x60,0x30,0x0A,0x06,0x08,0x2A,0x86,0x48,0xCE,0x3D,0x04,0x03,0x02,0x03,0x48,0x00,0x30,0x45,0x02,0x21,0x00,0xF8,0xE5,0xD9,0xD9,0xE6,0x60,0x6A,0xE5,0x7D,0x33,0x7B,0x2E,0x09,0xBC,0xEE,0xF1,0x6F,0x22,0x4D,0xC9,0xCD,0x36,0xD8,0x28,0xD1,0xE1,0xB0,0xDA,0xA2,0xFE,0xEC,0xAC,0x02,0x20,0x7D,0x0B,0x4C,0x2E,0x0D,0x3A,0x1F,0x03,0x47,0x65,0x30,0xB8,0x40,0x22,0xEA,0xAB,0x4D,0xF0,0x18,0x9A,0x5A,0x7E,0xE4,0x6B,0x3A,0x14,0xFF,0xE9,0x9B,0x60,0x2F,0x18,0x30,0x45,0x02,0x21,0x00,0xAE,0x12,0xD7,0xEA,0x92,0xB8,0x2A,0x7F,0xFA,0xA7,0xDF,0x38,0xAA,0xDA,0x30,0x76,0x49,0x77,0x08,0x36,0xCC,0xAD,0x7A,0xB4,0x2F,0xE8,0x2A,0xF5,0x0A,0xC1,0x27,0x61,0x02,0x20,0x1D,0x11,0xB7,0x0A,0xE2,0x79,0xCC,0x80,0x0B,0x5A,0xB2,0x6F,0x4E,0x29,0x3C,0xA2,0xC3,0x55,0xAE,0xE2,0x42,0xEC,0x02,0x2E,0x85,0x0E,0x6F,0x1E,0x43,0x1F,0xBC,0x9B ] );

 var challengeDataBuffer = new Buffer ( [ 0x65,0x35,0x30,0x36,0x35,0x32,0x35,0x62,0x61,0x65,0x62,0x30,0x36,0x30,0x32,0x34,0x39,0x61,0x35,0x65,0x36,0x38,0x62,0x30,0x63,0x34,0x63,0x33,0x37,0x34,0x30,0x34 ] );
 var appIDDataBuffer = new Buffer ( [ 0x34,0x38,0x37,0x33,0x65,0x34,0x36,0x32,0x31,0x61,0x62,0x62,0x33,0x30,0x37,0x65,0x33,0x33,0x66,0x62,0x66,0x64,0x37,0x38,0x34,0x66,0x35,0x63,0x32,0x66,0x32,0x65 ] );
 

 	 var rs = require('jsrsasign');
 	 var fs = require('fs');
	
	  var c = registrationDataBuffer;
	  var cc = c.toString("hex");
	  console.log(registrationDataBuffer);
	  console.log("-------------------")
	  console.log(challengeDataBuffer);
	  console.log("-------------------")
	  console.log(appIDDataBuffer);
          console.log("-------------------")
	  // reserved byte check.
	  var buf1 = c.slice(0,1);
	  console.log("reserved byte is:");
	  console.log(buf1.readInt8());
	  var l = (buf1.readInt8());
	  if (l !== 5){ console.log("Invalid  Request(Reserve Byte Error)"); }
	  console.log("-------------------")

	  // getting public Key of user registration.
	  var buf2 = c.slice(1,66);
	  console.log("public key is:");
	  console.log(buf2.toString("base64"));
	  console.log("--------");
	  console.log("public key(hex) is:");
	  console.log(buf2.toString("hex"));
	  var publicKey = buf2;
	  console.log("--------");
	  var publicKey64 = buf2.toString("base64").replace(/\+/g,'-').replace(/=/g, '');
	  console.log("public key(websafe64) is:");
	  console.log(publicKey64);
	  console.log("-------------------")

	  // getting keyhandle of user registration.
	  var buf3 = c.slice(66,67);
	  console.log("keyhandle length is:");
	  console.log(buf3.readInt8());
	  var keyhandleLength = buf3.readInt8();
	  console.log("--------")
	  var buf4End = 67 + keyhandleLength;
	  var buf4 = c.slice(67,buf4End);
	  var keyHandle = buf4;
	  var keyHandle64 = URLSafeBase64.encode(buf4);
	  console.log("keyhandle(base64) is:");
	  console.log(keyHandle64);
	  console.log("-------------------")
	
	  // getting certificate(X.509) of authenticator.
	  var buf5 = c.slice(buf4End);
	  console.log("ASN1.data:");
	  console.log(rs.ASN1HEX.dump(buf5.toString("hex")));
	  console.log("--------")
	  console.log("ASN1.length:")
	  var buf5End = asnLen(buf5);
	  console.log(buf5End);
	  console.log("--------")
	  console.log("X.509:");
	  var certificate = buf5.slice(0,buf5End);
	  var pemStr = "-----BEGIN CERTIFICATE-----\n";
	  for (var certStr = certificate.toString('base64'); certStr.length > 64; certStr = certStr.slice(64))
	  pemStr += certStr.slice(0, 64) + '\n';
	  pemStr += certStr + '\n';
	  pemStr += "-----END CERTIFICATE-----\n";
	  var certificate64 = pemStr;
	  console.log(certificate64);
	  console.log("-------------------")
	
	  // getting signature
	  var buf6 = buf5.slice(buf5End);
	  console.log("signature:");
	  console.log(buf6.toString("hex"));
	  console.log("--------")
	  console.log("ASN1.data:");
	  console.log(rs.ASN1HEX.dump(buf6.toString("hex")));
	  console.log("--------")
	  console.log("ASN1.length:")
	  var buf6End = asnLen(buf6);
	  console.log(buf6End);
	 if ( buf6End !== buf6.length) { console.log(req,res,"Invalid Request(registrationData has extra bytes)" ); }
	 var signature = buf6
	 console.log("-------------------")

	 var reservedByte = new Buffer('00', 'hex');

 	 // Hash data with sha256
	 var appIdHash = appIDDataBuffer;

	 var clientDataHash = challengeDataBuffer;

	 var signatureBase = Buffer.concat([reservedByte, appIdHash, clientDataHash, keyHandle, publicKey]);

	 console.log("signatureBase:");
	 console.log(signatureBase.toString("hex"));
 	 console.log("-------------------")

	 //Verify Registration
	 const verify = crypto.createVerify("RSA-SHA256");
  	 verify.update(signatureBase);
	 var flag = verify.verify(certificate64, signature);

 	 console.log ("VERIFY RESULT:");
	 console.log(flag);
	 console.log("-------------------")

